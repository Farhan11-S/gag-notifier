// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.0
// source: grow_api.proto

package grow_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrowAPIServiceClient is the client API for GrowAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrowAPIServiceClient interface {
	GetAllData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllDataResponse, error)
	GetGear(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockResponse, error)
	GetSeeds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockResponse, error)
	GetCosmetics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockResponse, error)
	GetEventShop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockResponse, error)
	GetEggs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EggResponse, error)
	GetWeather(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WeatherResponse, error)
	SubscribeToRareItemNotifications(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GrowAPIService_SubscribeToRareItemNotificationsClient, error)
}

type growAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrowAPIServiceClient(cc grpc.ClientConnInterface) GrowAPIServiceClient {
	return &growAPIServiceClient{cc}
}

func (c *growAPIServiceClient) GetAllData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllDataResponse, error) {
	out := new(AllDataResponse)
	err := c.cc.Invoke(ctx, "/grow_api.GrowAPIService/GetAllData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growAPIServiceClient) GetGear(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/grow_api.GrowAPIService/GetGear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growAPIServiceClient) GetSeeds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/grow_api.GrowAPIService/GetSeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growAPIServiceClient) GetCosmetics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/grow_api.GrowAPIService/GetCosmetics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growAPIServiceClient) GetEventShop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/grow_api.GrowAPIService/GetEventShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growAPIServiceClient) GetEggs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EggResponse, error) {
	out := new(EggResponse)
	err := c.cc.Invoke(ctx, "/grow_api.GrowAPIService/GetEggs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growAPIServiceClient) GetWeather(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WeatherResponse, error) {
	out := new(WeatherResponse)
	err := c.cc.Invoke(ctx, "/grow_api.GrowAPIService/GetWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growAPIServiceClient) SubscribeToRareItemNotifications(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GrowAPIService_SubscribeToRareItemNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrowAPIService_ServiceDesc.Streams[0], "/grow_api.GrowAPIService/SubscribeToRareItemNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &growAPIServiceSubscribeToRareItemNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrowAPIService_SubscribeToRareItemNotificationsClient interface {
	Recv() (*RareItemNotification, error)
	grpc.ClientStream
}

type growAPIServiceSubscribeToRareItemNotificationsClient struct {
	grpc.ClientStream
}

func (x *growAPIServiceSubscribeToRareItemNotificationsClient) Recv() (*RareItemNotification, error) {
	m := new(RareItemNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrowAPIServiceServer is the server API for GrowAPIService service.
// All implementations must embed UnimplementedGrowAPIServiceServer
// for forward compatibility
type GrowAPIServiceServer interface {
	GetAllData(context.Context, *emptypb.Empty) (*AllDataResponse, error)
	GetGear(context.Context, *emptypb.Empty) (*StockResponse, error)
	GetSeeds(context.Context, *emptypb.Empty) (*StockResponse, error)
	GetCosmetics(context.Context, *emptypb.Empty) (*StockResponse, error)
	GetEventShop(context.Context, *emptypb.Empty) (*StockResponse, error)
	GetEggs(context.Context, *emptypb.Empty) (*EggResponse, error)
	GetWeather(context.Context, *emptypb.Empty) (*WeatherResponse, error)
	SubscribeToRareItemNotifications(*emptypb.Empty, GrowAPIService_SubscribeToRareItemNotificationsServer) error
	mustEmbedUnimplementedGrowAPIServiceServer()
}

// UnimplementedGrowAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrowAPIServiceServer struct {
}

func (UnimplementedGrowAPIServiceServer) GetAllData(context.Context, *emptypb.Empty) (*AllDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllData not implemented")
}
func (UnimplementedGrowAPIServiceServer) GetGear(context.Context, *emptypb.Empty) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGear not implemented")
}
func (UnimplementedGrowAPIServiceServer) GetSeeds(context.Context, *emptypb.Empty) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeeds not implemented")
}
func (UnimplementedGrowAPIServiceServer) GetCosmetics(context.Context, *emptypb.Empty) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosmetics not implemented")
}
func (UnimplementedGrowAPIServiceServer) GetEventShop(context.Context, *emptypb.Empty) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventShop not implemented")
}
func (UnimplementedGrowAPIServiceServer) GetEggs(context.Context, *emptypb.Empty) (*EggResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEggs not implemented")
}
func (UnimplementedGrowAPIServiceServer) GetWeather(context.Context, *emptypb.Empty) (*WeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}
func (UnimplementedGrowAPIServiceServer) SubscribeToRareItemNotifications(*emptypb.Empty, GrowAPIService_SubscribeToRareItemNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToRareItemNotifications not implemented")
}
func (UnimplementedGrowAPIServiceServer) mustEmbedUnimplementedGrowAPIServiceServer() {}

// UnsafeGrowAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrowAPIServiceServer will
// result in compilation errors.
type UnsafeGrowAPIServiceServer interface {
	mustEmbedUnimplementedGrowAPIServiceServer()
}

func RegisterGrowAPIServiceServer(s grpc.ServiceRegistrar, srv GrowAPIServiceServer) {
	s.RegisterService(&GrowAPIService_ServiceDesc, srv)
}

func _GrowAPIService_GetAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowAPIServiceServer).GetAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grow_api.GrowAPIService/GetAllData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowAPIServiceServer).GetAllData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowAPIService_GetGear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowAPIServiceServer).GetGear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grow_api.GrowAPIService/GetGear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowAPIServiceServer).GetGear(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowAPIService_GetSeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowAPIServiceServer).GetSeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grow_api.GrowAPIService/GetSeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowAPIServiceServer).GetSeeds(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowAPIService_GetCosmetics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowAPIServiceServer).GetCosmetics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grow_api.GrowAPIService/GetCosmetics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowAPIServiceServer).GetCosmetics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowAPIService_GetEventShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowAPIServiceServer).GetEventShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grow_api.GrowAPIService/GetEventShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowAPIServiceServer).GetEventShop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowAPIService_GetEggs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowAPIServiceServer).GetEggs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grow_api.GrowAPIService/GetEggs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowAPIServiceServer).GetEggs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowAPIService_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowAPIServiceServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grow_api.GrowAPIService/GetWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowAPIServiceServer).GetWeather(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrowAPIService_SubscribeToRareItemNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrowAPIServiceServer).SubscribeToRareItemNotifications(m, &growAPIServiceSubscribeToRareItemNotificationsServer{stream})
}

type GrowAPIService_SubscribeToRareItemNotificationsServer interface {
	Send(*RareItemNotification) error
	grpc.ServerStream
}

type growAPIServiceSubscribeToRareItemNotificationsServer struct {
	grpc.ServerStream
}

func (x *growAPIServiceSubscribeToRareItemNotificationsServer) Send(m *RareItemNotification) error {
	return x.ServerStream.SendMsg(m)
}

// GrowAPIService_ServiceDesc is the grpc.ServiceDesc for GrowAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrowAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grow_api.GrowAPIService",
	HandlerType: (*GrowAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllData",
			Handler:    _GrowAPIService_GetAllData_Handler,
		},
		{
			MethodName: "GetGear",
			Handler:    _GrowAPIService_GetGear_Handler,
		},
		{
			MethodName: "GetSeeds",
			Handler:    _GrowAPIService_GetSeeds_Handler,
		},
		{
			MethodName: "GetCosmetics",
			Handler:    _GrowAPIService_GetCosmetics_Handler,
		},
		{
			MethodName: "GetEventShop",
			Handler:    _GrowAPIService_GetEventShop_Handler,
		},
		{
			MethodName: "GetEggs",
			Handler:    _GrowAPIService_GetEggs_Handler,
		},
		{
			MethodName: "GetWeather",
			Handler:    _GrowAPIService_GetWeather_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToRareItemNotifications",
			Handler:       _GrowAPIService_SubscribeToRareItemNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grow_api.proto",
}
